[gd_scene load_steps=9 format=2]

[ext_resource path="res://assets/main_menu_bg.png" type="Texture" id=1]
[ext_resource path="res://assets/main_menu_title.png" type="Texture" id=2]
[ext_resource path="res://assets/kaleidoscope.png" type="Texture" id=3]
[ext_resource path="res://assets/8bit_operator_plus/8bit.tres" type="DynamicFont" id=4]
[ext_resource path="res://src/main/main.gd" type="Script" id=5]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

const vec4 RED = vec4(1.0, 0.0, 0.0, 1.0);
const vec4 GREEN = vec4(0.0, 1.0, 0.0, 1.0);
const vec4 BLUE = vec4(0.0, 0.0, 1.0, 1.0);
const vec4 YELLOW = vec4(1.0, 1.0, 0.0, 1.0);
const vec4 CYAN = vec4(0.0, 1.0, 1.0, 1.0);
const vec4 MAGENTA = vec4(1.0, 0.0, 1.0, 1.0);

uniform sampler2D kaleidoscope_texture;
uniform float time_scale : hint_range(0.0, 5.0);
uniform float kaleidoscope_intensity : hint_range(0.0, 1.0);
uniform vec4 color_1 : hint_color;
uniform vec4 color_2 : hint_color;
uniform vec4 color_3 : hint_color;
uniform vec4 color_4 : hint_color;
uniform vec4 color_5 : hint_color;
uniform vec4 color_6 : hint_color;

void fragment() {
	vec2 kaleidoscope_uv = SCREEN_UV * vec2(16.0, -9.0) * 0.125 + vec2(-0.5, 0.05);
	vec4 kaleidoscope_color = texture(kaleidoscope_texture, kaleidoscope_uv);
	float delta = sin(TIME * time_scale);
	COLOR = texture(TEXTURE, UV);
	if (kaleidoscope_color == RED) {
		COLOR.rgb += -0.1 + mix(color_1, color_3, delta).rgb * kaleidoscope_intensity;
	}
	if (kaleidoscope_color == GREEN) {
		COLOR.rgb += -0.1 + mix(color_2, color_4, delta).rgb * kaleidoscope_intensity;
	}
	if (kaleidoscope_color == BLUE) {
		COLOR.rgb += -0.1 + mix(color_3, color_5, delta).rgb * kaleidoscope_intensity;
	}
	if (kaleidoscope_color == YELLOW) {
		COLOR.rgb += -0.1 + mix(color_4, color_6, delta).rgb * kaleidoscope_intensity;
	}
	if (kaleidoscope_color == CYAN) {
		COLOR.rgb += -0.1 + mix(color_5, color_1, delta).rgb * kaleidoscope_intensity;
	}
	if (kaleidoscope_color == MAGENTA) {
		COLOR.rgb += -0.1 + mix(color_6, color_2, delta).rgb * kaleidoscope_intensity;
	}
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/time_scale = 1.0
shader_param/kaleidoscope_intensity = 0.1
shader_param/color_1 = Color( 0.996078, 1, 0.552941, 1 )
shader_param/color_2 = Color( 0.478431, 1, 0.478431, 1 )
shader_param/color_3 = Color( 0.372549, 1, 0.909804, 1 )
shader_param/color_4 = Color( 0.27451, 0.505882, 1, 1 )
shader_param/color_5 = Color( 0.933333, 0.462745, 1, 1 )
shader_param/color_6 = Color( 1, 0.470588, 0.470588, 1 )
shader_param/kaleidoscope_texture = ExtResource( 3 )

[sub_resource type="StyleBoxEmpty" id=3]

[node name="Main" type="Node"]
script = ExtResource( 5 )

[node name="MainMenu" type="TextureRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 1 )

[node name="ThroughTheLookingGlass" type="TextureRect" parent="MainMenu"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 2 )

[node name="VBoxContainer" type="VBoxContainer" parent="MainMenu"]
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_bottom = -50.0
grow_vertical = 0
custom_constants/separation = 50

[node name="Play" type="Button" parent="MainMenu/VBoxContainer"]
margin_left = 582.0
margin_right = 698.0
margin_bottom = 68.0
size_flags_horizontal = 4
custom_fonts/font = ExtResource( 4 )
custom_styles/hover = SubResource( 3 )
custom_styles/pressed = SubResource( 3 )
custom_styles/focus = SubResource( 3 )
custom_styles/disabled = SubResource( 3 )
custom_styles/normal = SubResource( 3 )
text = "PLAY"

[node name="Quit" type="Button" parent="MainMenu/VBoxContainer"]
margin_left = 586.0
margin_top = 118.0
margin_right = 694.0
margin_bottom = 186.0
size_flags_horizontal = 4
custom_fonts/font = ExtResource( 4 )
custom_styles/hover = SubResource( 3 )
custom_styles/pressed = SubResource( 3 )
custom_styles/focus = SubResource( 3 )
custom_styles/disabled = SubResource( 3 )
custom_styles/normal = SubResource( 3 )
text = "QUIT"

[node name="Game" type="Node" parent="."]

[connection signal="pressed" from="MainMenu/VBoxContainer/Play" to="." method="_on_Play_pressed"]
[connection signal="pressed" from="MainMenu/VBoxContainer/Quit" to="." method="_on_Quit_pressed"]
